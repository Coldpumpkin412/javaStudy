package DFS_BFS;
import java.util.*;

public class BFS {
	public static boolean[] visited = new boolean[9]; //방문처리용 배열
	public static ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
	
	public static void main(String[] args) {
		// BFS(너비 우선 탐색) 방식 표현
		
		for(int i=0 ; i<9 ; i++) {
			graph.add(new ArrayList<Integer>()); //그래프 초기화
		}
		
        // 노드 1에 연결된 노드 정보 저장 
        graph.get(1).add(2);
        graph.get(1).add(3);
        graph.get(1).add(8);
        
        // 노드 2에 연결된 노드 정보 저장 
        graph.get(2).add(1);
        graph.get(2).add(7);
        
        // 노드 3에 연결된 노드 정보 저장 
        graph.get(3).add(1);
        graph.get(3).add(4);
        graph.get(3).add(5);
        
        // 노드 4에 연결된 노드 정보 저장 
        graph.get(4).add(3);
        graph.get(4).add(5);
        
        // 노드 5에 연결된 노드 정보 저장 
        graph.get(5).add(3);
        graph.get(5).add(4);
        
        // 노드 6에 연결된 노드 정보 저장 
        graph.get(6).add(7);
        
        // 노드 7에 연결된 노드 정보 저장 
        graph.get(7).add(2);
        graph.get(7).add(6);
        graph.get(7).add(8);
        
        // 노드 8에 연결된 노드 정보 저장 
        graph.get(8).add(1);
        graph.get(8).add(7);
        
        BFS(1);
	}
	
	//BFS함수 정의
	
	public static void BFS(int start) {
		Queue<Integer> q = new LinkedList<>();
		q.offer(start);
		
		//현재 노드 방문처리
		visited[start] = true;
		
		while(!q.isEmpty()) { //큐가 빌 때까지 반복
			int x = q.poll();
			System.out.print(x + " ");
			
			//해당 원소와 연결돼있으며 아직 방문하지 않은 원소들 큐에 삽입
			for(int i=0 ; i<graph.get(x).size() ; i++) {
				int y= graph.get(x).get(i);
				if(!visited[y]) {
					q.offer(y);
					visited[y] = true;
				}
			}
		}
	}

}
